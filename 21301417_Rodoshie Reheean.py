# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10He5o2u4qC77Qic2kvBvb-ERBTR-9Q5p
"""

import math
from random import  randint

id = input("Enter your student ID: ")
temp = input("Enter maximum and minimum value for negative HP: ").split()
min_hp = int(temp[0])
max_hp = int(temp[-1])

depth = int(id[0]) * 2  # mul by 2 since 2 agents
branches = int(id[2])

temp = id[len(id)-2:len(id)]
initial_health = int(temp[::-1])

hp_list = []
for i in range(branches ** depth):
    v = randint(min_hp, max_hp)
    hp_list.append(v)

al = math.inf * -1
bet = math.inf

def minimax(tree_depth, node_index, maximizing_player, val_list, alpha, beta, count=0):

    if tree_depth == depth:
        return val_list[node_index], count

    if maximizing_player:

        picked_val = al

        for k in range(0, branches):

            value, count = minimax(tree_depth + 1, node_index * branches + k, False, val_list, alpha, beta, count)
            picked_val = max(picked_val, value)
            alpha = max(alpha, picked_val)

            if beta <= alpha:
                count += 1
                break

        return picked_val, count

    else:

        picked_val = bet

        for k in range(0, branches):

            value, count = minimax(tree_depth + 1, node_index * branches + k, True, val_list, alpha, beta, count)
            picked_val = min(picked_val, value)
            beta = min(beta, picked_val)

            if beta <= alpha:
                count += 1
                break

        return picked_val, count

tup = minimax(0, 0, True, hp_list, al, bet)
print("1. Depth and Branches ratio is " + str(depth) + ":" + str(branches))
m = result = ', '.join(str(x) for x in hp_list)
print("2. Terminal States(Leaf Nodes) are ", m)
print("3. Left life(HP) of the defender after maximum damage caused by the attacker is ", tup[0])
print("4. After Alpha-Beta Pruning Leaf Node Comparisons", tup[1])